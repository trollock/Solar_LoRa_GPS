Postfledgling <- lmer(headbill ~  T_summer * P_summer + (1|doy_bin), data=male_recap, REML=FALSE)
Overwintering <- lmer(headbill ~  T_winter * P_winter + (1|doy_bin), data=male_recap, REML=FALSE)
`Spring migration` <- lmer(headbill ~  T_spring * P_spring + (1|doy_bin), data=male_recap, REML=FALSE)
Prebreeding <- lmer(headbill ~  T_breed * P_breed + (1|doy_bin), data=male_recap, REML=FALSE)
male_ms <- model.sel(Nestling, Postfledgling, Overwintering, `Spring migration`, Prebreeding)
male_ms$weight <- round(male_ms$weight, 3)
male_ms <- male_ms[, -c(1:18)]
male_ms %>%
kbl() %>%
kable_classic_2(full_width = F, html_font = "Arial", position = "left")
tab_model(Overwintering, show.r2 = FALSE,
dv.labels = c("head-bill length"),
pred.labels = c("Intercept", "Winter Temperature", "Winter Precipitation", "Winter Temp : Precip"))
fh3 <- lmer(headbill ~ T_winter * P_winter * sex + (1|doy), data=adult_weather, REML = TRUE)
newDat <- modelr::data_grid(adult_weather, T_winter = seq_range(T_winter, 10), P_winter = c(1, 2, 3), sex = c("male", "female"), doy = doy)
predFun <- function(fit) {
predict(fit, newDat, re.form=NA)  #re.form=NA for main level only effects
}
df <- bootMer(fh3, nsim=n_samples, FUN=predFun, use.u=FALSE, parallel = c("multicore"), ncpus=12)
conf_97.5 <- apply(df$t, 2, function(x) quantile(x, .975))
conf_2.5 <- apply(df$t, 2, function(x) quantile(x, .025))
conf <- cbind.data.frame(newDat, med = apply(df$t, 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- plyr::ddply(conf, c("T_winter", "P_winter", "sex"), summarize, medEst = median(med), conf_97.5 = mean(conf_97.5), conf_2.5 = mean(conf_2.5))
df <- cbind.data.frame(seq(from=1, to=nrow(df$t)), df$t)
names <- paste(newDat$T_winter, newDat$P_winter, newDat$sex, sep = ":")
colnames(df) <- c("replicate", names)
#Need to think how to bring another interaction term into this
df <- reshape2::melt(df, id=c("replicate"))
df <- df %>%
tidyr::separate(variable, c("T_winter", "P_winter", "sex"), sep = ":")
df$T_winter <- as.numeric(as.character(df$T_winter))
hb_winter_pred <- df
adult_winter_hb <- ggplot()+
geom_line(data=hb_winter_pred[which( hb_winter_pred$replicate <= plot_boots),], aes(x=T_winter, y=value, group=interaction(replicate, P_winter), color=P_winter), alpha=0.25, size=0.05)+
geom_line(data=conf_med, aes(x=T_winter, y=medEst, group=P_winter, color=P_winter), color="black", size=0.2)+
scale_color_manual(values=c("firebrick1", "grey70", "cadetblue3"))+
facet_wrap(.~sex)+
#geom_line(data=conf_med, aes(x=Env_Temp, y=conf_97.5, group=Drought_Index,), color="grey50", size=0.25, linetype="dashed")+
#geom_line(data=conf_med, aes(x=Env_Temp, y=conf_2.5,  group=Drought_Index,), color="grey50", size=0.25, linetype="dashed")+
xlab("Winter Average Temperature CÂ°")+
ylab("Adult Headbill (mm)")+
#geom_smooth(data=my_data2[which(my_data2$sex == "F"),], aes(x=Env_Temp, y=nmass), method="lm", color="cadetblue4", se=FALSE, size=0.5)+
#geom_smooth(data=my_data2[which(my_data2$sex == "M"),], aes(x=Env_Temp, y=nmass), method="lm", color="firebrick3", se=FALSE, size=0.5)+
scale_x_continuous(breaks=c(15, 18, 21))+
theme_cowplot()+
themeSmall +
theme(strip.background =element_rect(fill="white"))
adult_winter_hb
resid_panel(fh4)
adult_selection_figure <- cowplot::plot_grid(adult_winter_hb, adult_spring_mass, ncol=2, labels= c("A", "B"))
cowplot::save_plot("adult_winter_spring.pdf", adult_selection_figure, base_width = 7.08, base_height = 2)
comb_chicks$time <- comb_chicks$hatch_year - 1985
comb_chicks <- comb_chicks %>%
filter(hatch_year != 1992) %>%
filter(!is.na(chick_mass))
chick_mass_trends_ac <- lme(chick_mass ~ hatch_year * sex, random = ~ 1 | time, data=comb_chicks[ which(comb_chicks$time != 13),], correlation=corAR1(), control = lmeControl(opt = "optim"))
newDat <- modelr::data_grid(comb_chicks[ which(comb_chicks$time != 13),], sex = sex, hatch_year = hatch_year, time=time)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(data, ind){
model = lme(chick_mass ~ hatch_year * sex, random = ~ 1 | time, data=data[ind,], correlation=corAR1(), control = lmeControl(opt = "optim"))
c(fixef(model), predict(model, data.frame(newDat), level=0))
}
df <- boot(comb_chicks[ which(comb_chicks$time != 0),],  R=n_samples, statistic=predFun, parallel = "multicore", ncpus = 8)
conf_97.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .95, na.rm=T))
conf_2.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .05, na.rm=T))
conf <- cbind.data.frame(newDat, med = apply(df$t[,-c(1:6)], 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- plyr::ddply(conf, c("hatch_year", "sex"), summarize, medEst = median(med, na.rm=TRUE), conf_97.5 = median(conf_97.5, na.rm=TRUE), conf_2.5 = median(conf_2.5, na.rm=TRUE))
df2 <- as.data.frame(cbind(seq(from=1, to=nrow(df$t)), df$t[,-c(1:6)]))
#this code variation is to account for sex based estimates
numf <- nrow(newDat[ which(newDat$sex == "F"),])
df_f <- df2[,1:(numf+1)]
colnames(df_f) <- c("replicate", newDat$hatch_year[1:numf])
numm <- nrow(newDat[ which(newDat$sex == "M"),])
df_m <- cbind.data.frame(df2[,1], df2[(numf+1):(numf+numm+1)])
colnames(df_m) <- c("replicate", newDat$hatch_year[(numf+1):(numf+numm)])
numu <- nrow(newDat[ which(newDat$sex == "U"),])
df_u <- cbind.data.frame(df2[,1], df2[(numm+numf+1):(numu+numf+numm+1)])
colnames(df_u) <- c("replicate", newDat$hatch_year[(numm+numf+1):(numu+numf+numm)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_u <- reshape2::melt(df_u, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
df_u$variable <- as.numeric(as.character(df_u$variable))
tab_model(chick_mass_trends_ac)
chick_hb_trends_ac <- lme(chick_headbill ~ hatch_year * sex, random = ~ 1 | time, data=comb_chicks[ which(comb_chicks$chick_headbill != 0),], correlation=corAR1(), control = lmeControl(opt = "optim"))
newDat <- modelr::data_grid(comb_chicks[ which(comb_chicks$chick_headbill != 0),], sex = sex, hatch_year = hatch_year, time=time)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(data, ind){
model = lme(chick_headbill ~ hatch_year * sex, random = ~ 1 | time, data=data[ind,], correlation=corAR1(), control = lmeControl(opt = "optim"))
c(fixef(model), predict(model, data.frame(newDat), level=0))
}
df <- boot(comb_chicks[ which(comb_chicks$chick_headbill != 0),],  R=n_samples, statistic=predFun, parallel = "multicore", ncpus = 8)
conf_97.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .95, na.rm=T))
conf_2.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .05, na.rm=T))
conf <- cbind.data.frame(newDat, med = apply(df$t[,-c(1:6)], 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- ddply(conf, c("hatch_year", "sex"), summarize, medEst = median(med, na.rm=TRUE), conf_97.5 = median(conf_97.5, na.rm=TRUE), conf_2.5 = median(conf_2.5, na.rm=TRUE))
df2 <- as.data.frame(cbind(seq(from=1, to=nrow(df$t)), df$t[,-c(1:6)]))
#this code variation is to account for sex based estimates
numf <- nrow(newDat[ which(newDat$sex == "F"),])
df_f <- df2[,1:(numf+1)]
colnames(df_f) <- c("replicate", newDat$hatch_year[1:numf])
numm <- nrow(newDat[ which(newDat$sex == "M"),])
df_m <- cbind.data.frame(df2[,1], df2[(numf+1):(numf+numm+1)])
colnames(df_m) <- c("replicate", newDat$hatch_year[(numf+1):(numf+numm)])
numu <- nrow(newDat[ which(newDat$sex == "U"),])
df_u <- cbind.data.frame(df2[,1], df2[(numm+numf+1):(numu+numf+numm+1)])
colnames(df_u) <- c("replicate", newDat$hatch_year[(numm+numf+1):(numu+numf+numm)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_u <- reshape2::melt(df_u, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
df_u$variable <- as.numeric(as.character(df_u$variable))
tab_model(chick_hb_trends_ac)
chick_wing_trends_ac <- lme(chick_flatwing ~ hatch_year * sex, random = ~ 1 | time, data=comb_chicks[ which(comb_chicks$chick_flatwing != 0),], correlation=corAR1(), control = lmeControl(opt = "optim"))
newDat <- modelr::data_grid(comb_chicks[ which(comb_chicks$chick_flatwing != 0),], sex = sex, hatch_year = hatch_year, time=time)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(data, ind){
model = lme(chick_flatwing ~ hatch_year * sex, random = ~ 1 | time, data=data[ind,], correlation=corAR1(), control = lmeControl(opt = "optim"))
c(fixef(model), predict(model, data.frame(newDat), level=0))
}
df <- boot(comb_chicks[ which(comb_chicks$chick_flatwing != 0),],  R=n_samples, statistic=predFun, parallel = "multicore", ncpus = 8)
conf_97.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .95, na.rm=T))
conf_2.5 <- apply(df$t[,-c(1:6)], 2, function(x) quantile(x, .05, na.rm=T))
conf <- cbind.data.frame(newDat, med = apply(df$t[,-c(1:6)], 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- ddply(conf, c("hatch_year", "sex"), summarize, medEst = median(med, na.rm=TRUE), conf_97.5 = median(conf_97.5, na.rm=TRUE), conf_2.5 = median(conf_2.5, na.rm=TRUE))
df2 <- as.data.frame(cbind(seq(from=1, to=nrow(df$t)), df$t[,-c(1:6)]))
#this code variation is to account for sex based estimates
numf <- nrow(newDat[ which(newDat$sex == "F"),])
df_f <- df2[,1:(numf+1)]
colnames(df_f) <- c("replicate", newDat$hatch_year[1:numf])
numm <- nrow(newDat[ which(newDat$sex == "M"),])
df_m <- cbind.data.frame(df2[,1], df2[(numf+1):(numf+numm+1)])
colnames(df_m) <- c("replicate", newDat$hatch_year[(numf+1):(numf+numm)])
numu <- nrow(newDat[ which(newDat$sex == "U"),])
df_u <- cbind.data.frame(df2[,1], df2[(numm+numf+1):(numu+numf+numm+1)])
colnames(df_u) <- c("replicate", newDat$hatch_year[(numm+numf+1):(numu+numf+numm)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_u <- reshape2::melt(df_u, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
df_u$variable <- as.numeric(as.character(df_u$variable))
tab_model(chick_wing_trends_ac)
require(multcomp)
require(emmeans)
require(DHARMa)
require(modelr)
setwd("//Users/ryanshipley/Documents/Research/2016 TRES temp lab/Data/") ##Laptop
adult_data <- read.csv(file="adult_morphology.csv", head=TRUE, sep=",", stringsAsFactors=FALSE)
###Filtering criteria for cleaning up the adult dataset
adult_data <- adult_data[ which(adult_data$sex == "F" | adult_data$sex == "M"),]
adult_data$sex <- revalue(adult_data$sex, c("F"="female", "M"="male"))
#filter headbills that are less than 26 and greater than 31 mm
adult_data$headbill[ adult_data$headbill < 24 | adult_data$headbill > 34] <- NA
#filter flatwings that are less than 100 and greater than 150 mm
adult_data$flatwing[ adult_data$flatwing < 100 | adult_data$flatwing > 150] <- NA
#filter nmass than are less than 12 and greater than 32 grams
adult_data$mass[ adult_data$mass < 16 | adult_data$mass > 32] <- NA
adult_data$sex <- as.factor(adult_data$sex)
#merge data with laydate summary to match the data to breeding season
colnames(laydate_summary)[1] <- c("year")
#create some data bins for the seasonal trend analysis
adult_data$doy_bin <- cut(adult_data$doy, breaks=c(105, 110, 115, 120, 125 ,130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180), labels=c("110", "115", "120", "125",
"130", "135","140", "145","150", "155", "160", "165", "170", "175", "180"))
adult_data$mass_bin <- cut(adult_data$mass, breaks=seq(from = 16, to = 28, by = 0.5), labels=seq(from = 16.5, to = 28, by = 0.5))
adult_data$hb_bin <- cut(adult_data$headbill, breaks=seq(from = 24, to = 31, by = 0.25), labels=seq(from = 24.25, to = 31, by = 0.25))
adult_data$wing_bin <- cut(adult_data$flatwing, breaks=seq(from = 100, to = 130, by = 2), labels=seq(from = 102, to = 130, by = 2))
adult_data <- merge(adult_data, laydate_summary, by=c("year"))
#Load datasets
##############################################################################
setwd("//Users/ryanshipley/Documents/Research/2016 TRES Temp Lab/Data/") ##Laptop
nest_laydate_data <- read.csv(file="all_nests.csv", head=TRUE, sep=",", stringsAsFactors=FALSE)
nest_laydate_data <- nest_laydate_data[, c("cbandf", "nseason", "nattempt", "cbandm", "jlaydate", "nclutch", "nfledgnum")]
nest_laydate_data <- reshape2::melt(nest_laydate_data, id=c("nseason", "nattempt", "jlaydate", "nclutch", "nfledgnum"))
nest_laydate_data <- nest_laydate_data %>%
filter(nattempt == 1)
colnames(nest_laydate_data) <- c("year", "nattempt", "jlaydate", "nclutch", "nfledgnum", "variable", "band_num")
adult_data2 <- merge(adult_data, nest_laydate_data, by=c("band_num", "year"))
adult_data2$nfledgnum[ adult_data2$nfledgnum < 0] <- 0
adult_data2$bin_fledge <- ifelse(adult_data2$nfledgnum == 0, 0, 1)
adult_data2 <- adult_data2 %>%
dplyr::group_by(band_num, year, sex) %>%
dplyr::summarize(mass_bin = max(as.numeric(as.character(mass_bin))), hb_bin = max(as.numeric(as.character(hb_bin))), wing_bin = max(as.numeric(as.character(wing_bin))), mass =  mean(mass, na.rm=TRUE), headbill = mean(headbill, na.rm=TRUE), flatwing = mean(flatwing, na.rm=TRUE), nfledgnum = ceiling(mean(nfledgnum, na.rm=TRUE))) %>%
dplyr::ungroup()
mass_summary <- adult_data2 %>%
dplyr::group_by(sex, mass_bin) %>%
dplyr::summarise(n = n(), mean =  mean(nfledgnum, na.rm=TRUE), se = plotrix::std.error(nfledgnum, na.rm=TRUE)) %>%
dplyr::filter(n >= 5) %>%
dplyr::ungroup()
mass_summary$mass_bin <- as.numeric(as.character(mass_summary$mass_bin))
hb_summary <- adult_data2 %>%
dplyr::group_by(sex, hb_bin) %>%
dplyr::summarise(n = n(), mean =  mean(nfledgnum, na.rm=TRUE), se = plotrix::std.error(nfledgnum, na.rm=TRUE)) %>%
dplyr::filter(n >= 5) %>%
dplyr::ungroup()
hb_summary$hb_bin <- as.numeric(as.character(hb_summary$hb_bin))
wing_summary <- adult_data2 %>%
dplyr::group_by(sex, wing_bin) %>%
dplyr::summarise(n = n(), mean =  mean(nfledgnum, na.rm=TRUE), se = plotrix::std.error(nfledgnum, na.rm=TRUE)) %>%
dplyr::filter(n >= 5) %>%
dplyr::ungroup()
wing_summary$wing_bin <- as.numeric(as.character(wing_summary$wing_bin))
#adult_data2$mass <- scale(adult_data2$mass)
adult_mass_repro <- glmer.nb(nfledgnum ~ mass * sex + (1 | year), data=adult_data2[ which(adult_data2$nfledgnum >= 0),])
newDat <- modelr::data_grid(adult_data2, mass = seq_range(mass, 40), sex = sex, year = year)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(fit) {
predict(fit, newDat, re.form=NA, type="response")  #re.form=NA for main level only effects predictions
}
df <- bootMer(adult_mass_repro, nsim=n_samples, FUN=predFun, use.u=FALSE, parallel = c("multicore"), ncpus=12)
conf_97.5 <- apply(df$t, 2, function(x) quantile(x, .975))
conf_2.5 <- apply(df$t, 2, function(x) quantile(x, .025))
conf <- cbind.data.frame(newDat, med = apply(df$t, 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- ddply(conf, c("mass", "sex"), summarize, medEst = median(med), conf_97.5 = median(conf_97.5), conf_2.5 = median(conf_2.5))
df2 <- cbind.data.frame(seq(from=1, to=nrow(df$t)), df$t)
#this code variation is to account for sex based estimates
numF <- nrow(newDat[ which(newDat$sex == "female"),])
df_f <- df2[,1:(numF+1)]
colnames(df_f) <- c("replicate", newDat$mass[1:numF])
numT <- nrow(newDat)
df_m <- cbind.data.frame(replicate = df2[,1], df2[(numF + 2):(numT+1)])
colnames(df_m) <- c("replicate", newDat$mass[(numF + 1):(numT)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
simulationOutput <- simulateResiduals(fittedModel = adult_mass_repro, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
require(glmmTMB)
adult_mass_repro2 <- glmmTMB(nfledgnum ~ mass * sex + (1 | year), ziformula = ~ 1, data = adult_data2, family = nbinom1)
summary(adult_mass_repro2)
simulationOutput <- simulateResiduals(fittedModel = adult_mass_repro2, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
tab_model(adult_mass_repro2, show.r2 = FALSE)
require(ggExtra)
adult_mass_repro_m <- as.data.frame(df_m)
adult_mass_repro_f <- as.data.frame(df_f)
adult_mass_repro_fig <- ggplot(data=adult_data2, aes(x=mass, y=nfledgnum, color=sex))+
geom_line(data=adult_mass_repro_m[ which(adult_mass_repro_m$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#00c4aa", alpha=0.25, size=0.1)+
geom_line(data=adult_mass_repro_f[ which(adult_mass_repro_f$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#8700f9", alpha=0.25, size=0.1)+
geom_line(data=conf_med, aes(x=mass, y=medEst, group=sex), color="black", size=0.5)+
geom_line(data=conf_med, aes(x=mass, y=conf_97.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_line(data=conf_med, aes(x=mass, y=conf_2.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_pointrange(data=mass_summary, aes(mass_bin, mean, ymin=mean - se, ymax=mean + se, color=sex), size=0.25, shape=21, fill="white")+
geom_point(data=mass_summary[ which(mass_summary$sex == "male"),], aes(mass_bin, mean), color="#00c4aa", size=1.5, shape=21, fill="white")+
geom_point(data=mass_summary[ which(mass_summary$sex == "female"),], aes(mass_bin, mean), color="#8700f9", size=1.5, shape=21, fill="white")+
scale_color_manual(values=c("#8700f9", "#00c4aa"))+
xlab("Mass during Reproduction (g)")+
ylab("Number of Chicks Fledged")+
ylim(0,6)+
theme_cowplot()+
themeSmall
adult_mass_repro_fig
testZeroInflation(simulationOutput)
#adult_data2$headbill <- scale(adult_data2$headbill)
adult_headbill_repro <- glmer(nfledgnum ~ headbill * sex + (1 | year), data=adult_data2[ which(adult_data2$nfledgnum >= 0),])
newDat <- modelr::data_grid(adult_data2, headbill = modelr::seq_range(headbill, 40), sex = sex, year = year)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(fit) {
predict(fit, newDat, re.form=NA, type="response")  #re.form=NA for main level only effects predictions
}
df <- bootMer(adult_headbill_repro, nsim=n_samples, FUN=predFun, use.u=FALSE, parallel = c("multicore"), ncpus=12)
conf_97.5 <- apply(df$t, 2, function(x) quantile(x, .975))
conf_2.5 <- apply(df$t, 2, function(x) quantile(x, .025))
conf <- cbind.data.frame(newDat, med = apply(df$t, 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- ddply(conf, c("headbill", "sex"), summarize, medEst = median(med), conf_97.5 = median(conf_97.5), conf_2.5 = median(conf_2.5))
df2 <- cbind.data.frame(seq(from=1, to=nrow(df$t)), df$t)
#this code variation is to account for sex based estimates
numF <- nrow(newDat[ which(newDat$sex == "female"),])
df_f <- df2[,1:(numF+1)]
colnames(df_f) <- c("replicate", newDat$headbill[1:numF])
numT <- nrow(newDat)
df_m <- cbind.data.frame(replicate = df2[,1], df2[(numF + 2):(numT+1)])
colnames(df_m) <- c("replicate", newDat$headbill[(numF + 1):(numT)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
simulationOutput <- simulateResiduals(fittedModel = adult_headbill_repro, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
require(glmmTMB)
adult_headbill_repro2 <- glmmTMB(nfledgnum ~ headbill * sex + (1 | year), ziformula = ~ 1, data = adult_data2, family = nbinom2)
summary(adult_headbill_repro2)
simulationOutput <- simulateResiduals(fittedModel = adult_headbill_repro2, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
tab_model(adult_headbill_repro2, show.r2 = FALSE)
adult_headbill_repro_m <- as.data.frame(df_m)
adult_headbill_repro_f <- as.data.frame(df_f)
adult_headbill_repro_fig <- ggplot()+
geom_line(data=adult_headbill_repro_m[ which(adult_headbill_repro_m$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#00c4aa", alpha=0.25, size=0.1)+
geom_line(data=adult_headbill_repro_f[ which(adult_headbill_repro_f$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#8700f9", alpha=0.25, size=0.1)+
geom_line(data=conf_med, aes(x=headbill, y=medEst, group=sex), color="black", size=0.5)+
geom_line(data=conf_med, aes(x=headbill, y=conf_97.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_line(data=conf_med, aes(x=headbill, y=conf_2.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_pointrange(data=hb_summary, aes(hb_bin, mean, ymin=mean - se, ymax=mean + se, color=sex), size=0.25, shape=21, fill="white")+
geom_point(data=hb_summary[ which(hb_summary$sex == "male"),], aes(hb_bin, mean), color="#00c4aa", size=1.5, shape=21, fill="white")+
geom_point(data=hb_summary[ which(hb_summary$sex == "female"),], aes(hb_bin, mean), color="#8700f9", size=1.5, shape=21, fill="white")+
scale_color_manual(values=c("#8700f9", "#00c4aa"))+
xlab("Adult Headbill Length (mm)")+
ylab("Number of Chicks Fledged")+
ylim(0, 6)+
theme_cowplot()+
themeSmall
adult_headbill_repro_fig
testZeroInflation(simulationOutput)
#adult_data2$flatwing <- scale(adult_data2$flatwing)
adult_flatwing_repro <- glmer(nfledgnum ~ flatwing * sex + (1 | year), data=adult_data2[ which(adult_data2$nfledgnum >= 0),])
newDat <- modelr::data_grid(adult_data2, flatwing = seq_range(flatwing, 40), sex = sex, year = year)
newDat <- arrange(newDat, newDat$sex)
predFun <- function(fit) {
predict(fit, newDat, re.form=NA, type="response")  #re.form=NA for main level only effects predictions
}
df <- bootMer(adult_flatwing_repro, nsim=n_samples, FUN=predFun, use.u=FALSE, parallel = c("multicore"), ncpus=12)
conf_97.5 <- apply(df$t, 2, function(x) quantile(x, .975))
conf_2.5 <- apply(df$t, 2, function(x) quantile(x, .025))
conf <- cbind.data.frame(newDat, med = apply(df$t, 2, FUN=median), conf_97.5, conf_2.5)
conf_med <- ddply(conf, c("flatwing", "sex"), summarize, medEst = median(med), conf_97.5 = median(conf_97.5), conf_2.5 = median(conf_2.5))
df2 <- cbind.data.frame(seq(from=1, to=nrow(df$t)), df$t)
#this code variation is to account for sex based estimates
numF <- nrow(newDat[ which(newDat$sex == "female"),])
df_f <- df2[,1:(numF+1)]
colnames(df_f) <- c("replicate", newDat$flatwing[1:numF])
numT <- nrow(newDat)
df_m <- cbind.data.frame(replicate = df2[,1], df2[(numF + 2):(numT+1)])
colnames(df_m) <- c("replicate", newDat$flatwing[(numF + 1):(numT)])
df_m <- reshape2::melt(df_m, id=c("replicate"))
df_f <- reshape2::melt(df_f, id=c("replicate"))
df_m$variable <- as.numeric(as.character(df_m$variable))
df_f$variable <- as.numeric(as.character(df_f$variable))
simulationOutput <- simulateResiduals(fittedModel = adult_flatwing_repro, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
#devtools::install_github("glmmTMB/glmmTMB/glmmTMB")
require(glmmTMB)
adult_flatwing_repro2 <- glmmTMB(nfledgnum ~ flatwing * sex + (1 | year), ziformula = ~ 1, data = adult_data2, family = nbinom2)
summary(adult_flatwing_repro2)
simulationOutput <- simulateResiduals(fittedModel = adult_flatwing_repro2, n = 250, use.u = T)
plot(simulationOutput)
testDispersion(simulationOutput)
testZeroInflation(simulationOutput)
tab_model(adult_flatwing_repro2, show.r2=FALSE)
adult_flatwing_repro_m <- as.data.frame(df_m)
adult_flatwing_repro_f <- as.data.frame(df_f)
adult_flatwing_repro_fig <- ggplot()+
geom_line(data=adult_flatwing_repro_m[ which(adult_flatwing_repro_m$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#00c4aa", alpha=0.25, size=0.1)+
geom_line(data=adult_flatwing_repro_f[ which(adult_flatwing_repro_f$replicate <= plot_boots),], aes(x=variable, y=value, group=as.factor(replicate)), color="#8700f9", alpha=0.25, size=0.1)+
geom_line(data=conf_med, aes(x=flatwing, y=medEst, group=sex), color="black", size=0.5)+
geom_line(data=conf_med, aes(x=flatwing, y=conf_97.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_line(data=conf_med, aes(x=flatwing, y=conf_2.5, group=sex), color="grey50", size=0.25, linetype="dashed")+
geom_pointrange(data=wing_summary, aes(wing_bin, mean, ymin=mean - se, ymax=mean + se, color=sex), size=0.25, shape=21, fill="white")+
geom_point(data=wing_summary[ which(wing_summary$sex == "male"),], aes(wing_bin, mean), color="#00c4aa", size=1.5, shape=21, fill="white")+
geom_point(data=wing_summary[ which(wing_summary$sex == "female"),], aes(wing_bin, mean), color="#8700f9", size=1.5, shape=21, fill="white")+
scale_color_manual(values=c("#8700f9", "#00c4aa"))+
xlab("Adult Flatwing Length (mm)")+
ylab("Number of Chicks Fledged")+
ylim(0, 6)+
theme_cowplot()+
themeSmall
adult_flatwing_repro_fig
testZeroInflation(simulationOutput)
#resid_panel(adult_flatwing_repro)
adult_repro_plot <- cowplot::plot_grid(adult_mass_repro_fig, adult_headbill_repro_fig, adult_flatwing_repro_fig, ncol=3,labels= c("A","B", "C"))
cowplot::save_plot("figure_5.png", adult_repro_plot, base_width = 7.2, base_height = 2.5)
chick_output <- my_data2[ ,c("cchickid", "cuniqnest", "nseason", "dhatchdoy", "nmass", "nheadbill", "nflatwing", "Env_Temp" )]
write.csv(chick_output, "chick_data_DRYAD.csv")
adult_output <- adult_data2[ ,c("band_num", "sex", "mass", "headbill", "flatwing", "nfledgnum")]
write.csv(adult_output, "adult_data_DRYAD.csv")
library(httr)
library(RJSONIO)
library(ggplot2)
options(digits=8)
#blackbirds
#apiKey <- 'NNSXS.LWN6CXIYJAWTFDE6N33R6PUOBDTPL5PHG6KALXA.Z5SCZYW2SWVGMSURGLSXJBQVG55VF3KEPBPU2FGAODMBSYD6H2TA'
#theApplication = "amsel-tags-2021"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Stored_Data") ##Laptop
#cockatoos
#apiKey <- 'NNSXS.74EQKFHALY6FTUFEKYUE55BGVXMVW5U75E7ECRQ.JN5G2JCFMDTG2UF6DH4FYIFLFTSL4U77SRFFIE52MGHH2OCJKIRQ'
#theApplication = "aplin-cockatoo-2021"
#berchtesgaden
apiKey <- 'NNSXS.HQFNBW6LOIGIC4U3OO7MRGP6JD4KBKDTSQNGWLQ.MD7OGGWO6GJE4IN7PZVMFM3N6NVGLAZH5J23ANN4DPVNUOV2B5QA'
theApplication = "berchtesgaden-2022-choughs-test"
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Data") ##Laptop
#test_tags
#apiKey <- 'NNSXS.76D5CPNMD6VAUZKXYVXFLREQDLT5ML5BNH5A4TI.HAKCARLNAIQ3Y6BLMOVOU7MDKBGJ57J5DZXTAKH6EDBEATY5HVIQ'
#theApplication = "tag-prototypes-2022"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Tag_Data") ##Laptop
theFields = "up.uplink_message.decoded_payload"
theNumberOfRecords = 3600
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
#theURL = paste("https://au1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&last=186400s", "&field_mask=", theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
#result <- rjson::fromJSON(result)
#result <- result %>%
#  spread_all
#result <- result[[1]][lengths(result[[1]]) != 0]
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-10]
colnames(result) <- c("id", "message_time", "volts", "d/m/y", "hdop", "latitude", "longitude", "siv", "h/m/s/cs")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$volts <- as.numeric(result$volts)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
#result <- result[which(result$id_6 == "04476c" | result$id_6 == "04476d" | result$id_6 == "04476e" |
#                        result$id_6 == "04476f" | result$id_6 == "044770" | result$id_6 == "044a2b" |
#                         result$id_6 == "044a2c" | result$id_6 == "044a2d" | result$id_6 == "044a2f"),]
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4))
#geom_smooth(se=FALSE, method="lm",data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4)) +
facet_wrap(.~id_6, ncol=10)
library(httr)
library(RJSONIO)
library(ggplot2)
options(digits=8)
#blackbirds
apiKey <- 'NNSXS.LWN6CXIYJAWTFDE6N33R6PUOBDTPL5PHG6KALXA.Z5SCZYW2SWVGMSURGLSXJBQVG55VF3KEPBPU2FGAODMBSYD6H2TA'
theApplication = "amsel-tags-2021"
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Stored_Data") ##Laptop
#cockatoos
#apiKey <- 'NNSXS.74EQKFHALY6FTUFEKYUE55BGVXMVW5U75E7ECRQ.JN5G2JCFMDTG2UF6DH4FYIFLFTSL4U77SRFFIE52MGHH2OCJKIRQ'
#theApplication = "aplin-cockatoo-2021"
#berchtesgaden
#apiKey <- 'NNSXS.HQFNBW6LOIGIC4U3OO7MRGP6JD4KBKDTSQNGWLQ.MD7OGGWO6GJE4IN7PZVMFM3N6NVGLAZH5J23ANN4DPVNUOV2B5QA'
#theApplication = "berchtesgaden-2022-choughs-test"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Data") ##Laptop
#test_tags
#apiKey <- 'NNSXS.76D5CPNMD6VAUZKXYVXFLREQDLT5ML5BNH5A4TI.HAKCARLNAIQ3Y6BLMOVOU7MDKBGJ57J5DZXTAKH6EDBEATY5HVIQ'
#theApplication = "tag-prototypes-2022"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Tag_Data") ##Laptop
theFields = "up.uplink_message.decoded_payload"
theNumberOfRecords = 3600
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
#theURL = paste("https://au1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&last=186400s", "&field_mask=", theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
#result <- rjson::fromJSON(result)
#result <- result %>%
#  spread_all
#result <- result[[1]][lengths(result[[1]]) != 0]
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-10]
colnames(result) <- c("id", "message_time", "volts", "d/m/y", "hdop", "latitude", "longitude", "siv", "h/m/s/cs")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$volts <- as.numeric(result$volts)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
#result <- result[which(result$id_6 == "04476c" | result$id_6 == "04476d" | result$id_6 == "04476e" |
#                        result$id_6 == "04476f" | result$id_6 == "044770" | result$id_6 == "044a2b" |
#                         result$id_6 == "044a2c" | result$id_6 == "044a2d" | result$id_6 == "044a2f"),]
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4))
#geom_smooth(se=FALSE, method="lm",data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4)) +
facet_wrap(.~id_6, ncol=10)
