apiKey <- 'NNSXS.OAVAKSBGYAOCE56PB44RDMPXIJENHZIF4KG75LY.JRUBMWZREMCRXZ2NG2AMEP5VUUXYHASCZBU4KWANQW3HZ25A2YQQ'
theApplication = "ouroboros-v2-0-prototype"
options(digits=8)
theFields = "up.uplink_message.decoded_payload"
#theFields = "up.uplink_message.rx_metadata"
theNumberOfRecords = 5000
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result7<- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--
result$volts <- as.numeric(result$volts)
result$pressure <- as.numeric(result$pressure)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=4.05, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#92eb88", alpha=0.8)+
annotate(geom="rect", ymin=3.85, ymax=4.05, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.85, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, shape=year, fill=year))+
#scale_shape_manual(values = c(21, 21, 19 ,21))+
#scale_fill_manual(values=c("white", "red", "black", "green"))+
cowplot::theme_cowplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.3)) +
facet_wrap(.~id_6, ncol=10)
#berchtesgaden
apiKey <- 'NNSXS.HQFNBW6LOIGIC4U3OO7MRGP6JD4KBKDTSQNGWLQ.MD7OGGWO6GJE4IN7PZVMFM3N6NVGLAZH5J23ANN4DPVNUOV2B5QA'
theApplication = "berchtesgaden-2022-choughs-test"
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Data") ##Laptop
#test_tags
#apiKey <- 'NNSXS.76D5CPNMD6VAUZKXYVXFLREQDLT5ML5BNH5A4TI.HAKCARLNAIQ3Y6BLMOVOU7MDKBGJ57J5DZXTAKH6EDBEATY5HVIQ'
#theApplication = "tag-prototypes-2022"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Tag_Data") ##Laptop
theFields = "up.uplink_message.decoded_payload"
theNumberOfRecords = 3600
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
#theURL = paste("https://au1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&last=186400s", "&field_mask=", theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
#result <- rjson::fromJSON(result)
#result <- result %>%
#  spread_all
#result <- result[[1]][lengths(result[[1]]) != 0]
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-10]
colnames(result) <- c("id", "message_time", "volts", "d/m/y", "hdop", "latitude", "longitude", "siv", "h/m/s/cs")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$volts <- as.numeric(result$volts)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
#result <- result[which(result$id_6 == "04476c" | result$id_6 == "04476d" | result$id_6 == "04476e" |
#                        result$id_6 == "04476f" | result$id_6 == "044770" | result$id_6 == "044a2b" |
#                         result$id_6 == "044a2c" | result$id_6 == "044a2d" | result$id_6 == "044a2f"),]
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4))
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result7<- result
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result7<- result
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result7<- result
result$volts <- as.numeric(result$volts)
result$pressure <- as.numeric(result$pressure)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=4.05, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#92eb88", alpha=0.8)+
annotate(geom="rect", ymin=3.85, ymax=4.05, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.85, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, shape=year, fill=year))+
#scale_shape_manual(values = c(21, 21, 19 ,21))+
#scale_fill_manual(values=c("white", "red", "black", "green"))+
cowplot::theme_cowplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.3)) +
facet_wrap(.~id_6, ncol=10)
apiKey <- 'NNSXS.CEZKRVOAWZUKTRPSLVFQVSODA66SPT7WBQGHYIY.SX5CE5LS36GKR2WK742K6VDIKSVMZ777JIW2YHHQEVZPLXKWPUCQ'
theApplication = "amsel-group-6-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_6") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result6 <- result
result$volts <- as.numeric(result$volts)
result$pressure <- as.numeric(result$pressure)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=4.05, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#92eb88", alpha=0.8)+
annotate(geom="rect", ymin=3.85, ymax=4.05, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.85, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, shape=year, fill=year))+
#scale_shape_manual(values = c(21, 21, 19 ,21))+
#scale_fill_manual(values=c("white", "red", "black", "green"))+
cowplot::theme_cowplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.3)) +
facet_wrap(.~id_6, ncol=10)
#group 5
apiKey <- 'NNSXS.BMFJPWHTUBTDTGQ5OAAYG2P6DCZ4S55HMBTYUYI.KUGTUUXW2FAIUJVJHFUWXHWQ2YIS2ULRQXTJXCQXNJCHJICHDNFA'
theApplication = "amsel-group-5-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_5") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result5 <- result
result$volts <- as.numeric(result$volts)
result$pressure <- as.numeric(result$pressure)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=4.05, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#92eb88", alpha=0.8)+
annotate(geom="rect", ymin=3.85, ymax=4.05, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.85, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, shape=year, fill=year))+
#scale_shape_manual(values = c(21, 21, 19 ,21))+
#scale_fill_manual(values=c("white", "red", "black", "green"))+
cowplot::theme_cowplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.3)) +
facet_wrap(.~id_6, ncol=10)
#berchtesgaden
apiKey <- 'NNSXS.HQFNBW6LOIGIC4U3OO7MRGP6JD4KBKDTSQNGWLQ.MD7OGGWO6GJE4IN7PZVMFM3N6NVGLAZH5J23ANN4DPVNUOV2B5QA'
theApplication = "berchtesgaden-2022-choughs-test"
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Data") ##Laptop
#test_tags
#apiKey <- 'NNSXS.76D5CPNMD6VAUZKXYVXFLREQDLT5ML5BNH5A4TI.HAKCARLNAIQ3Y6BLMOVOU7MDKBGJ57J5DZXTAKH6EDBEATY5HVIQ'
#theApplication = "tag-prototypes-2022"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Tag_Data") ##Laptop
theFields = "up.uplink_message.decoded_payload"
theNumberOfRecords = 3600
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
#theURL = paste("https://au1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&last=186400s", "&field_mask=", theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
#result <- rjson::fromJSON(result)
#result <- result %>%
#  spread_all
#result <- result[[1]][lengths(result[[1]]) != 0]
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-10]
colnames(result) <- c("id", "message_time", "volts", "d/m/y", "hdop", "latitude", "longitude", "siv", "h/m/s/cs")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$volts <- as.numeric(result$volts)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
#result <- result[which(result$id_6 == "04476c" | result$id_6 == "04476d" | result$id_6 == "04476e" |
#                        result$id_6 == "04476f" | result$id_6 == "044770" | result$id_6 == "044a2b" |
#                         result$id_6 == "044a2c" | result$id_6 == "044a2d" | result$id_6 == "044a2f"),]
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4))
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$pressure <- as.numeric(result$pressure)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=4.05, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#92eb88", alpha=0.8)+
annotate(geom="rect", ymin=3.85, ymax=4.05, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.85, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, shape=year, fill=year))+
#scale_shape_manual(values = c(21, 21, 19 ,21))+
#scale_fill_manual(values=c("white", "red", "black", "green"))+
cowplot::theme_cowplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.3)) +
facet_wrap(.~id_6, ncol=10)
library(httr)
library(RJSONIO)
library(ggplot2)
library(dplyr)
#group 6
apiKey <- 'NNSXS.CEZKRVOAWZUKTRPSLVFQVSODA66SPT7WBQGHYIY.SX5CE5LS36GKR2WK742K6VDIKSVMZ777JIW2YHHQEVZPLXKWPUCQ'
theApplication = "amsel-group-6-2022"
#ouroboros
apiKey <- 'NNSXS.OAVAKSBGYAOCE56PB44RDMPXIJENHZIF4KG75LY.JRUBMWZREMCRXZ2NG2AMEP5VUUXYHASCZBU4KWANQW3HZ25A2YQQ'
theApplication = "ouroboros-v2-0-prototype"
options(digits=8)
theFields = "up.uplink_message.decoded_payload"
#theFields = "up.uplink_message.rx_metadata"
theNumberOfRecords = 5000
#Blackbirds Group 1
apiKey <- 'NNSXS.F2Y2B4VPSCLXAGK4SJUWV324KSAVTAC4O7M6Y7Q.NHDYQCZ7YZI5DSVR6RVUPJDVZQ46BAD2ZAWCQ2PY5SIKQFMRFGRQ'
theApplication = "amsel-group-1-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_1")
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result1 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
#bb_2022_group_2 Key
apiKey <- 'NNSXS.W7XUVR2KFXNZF3MM53NICOBVMHRTU7AWQN6A73Y.WNKCUFXXAYMDG5TFLKI3CHTCXHMMIRXSLXRVUPFZYN2OQ4B7ETWA'
theApplication = "amsel-group-2-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_2") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result2 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
apiKey <- 'NNSXS.R5PHYSDPGJ4O4LRHFCLO5DBT6UJOTVOKNCKIMQY.E2WMISDLREL3UUC4QGT7QU6HXRG375COFDPNFLUWBRGYHNTKWZGQ'
theApplication = "amsel-group-3-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_3") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result3 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
#group 4
apiKey <- 'NNSXS.2XTDIV36A27K4FVSOA2HIFQUB4UFPR4VK3GQWBQ.ESUI5RM6BMCRZ4YWKQYNAWGK2ZDBGRPQAE2OYHF54L3BOAARXT3Q'
theApplication = "amsel-group-4-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_4") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result4 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
#group 5
apiKey <- 'NNSXS.BMFJPWHTUBTDTGQ5OAAYG2P6DCZ4S55HMBTYUYI.KUGTUUXW2FAIUJVJHFUWXHWQ2YIS2ULRQXTJXCQXNJCHJICHDNFA'
theApplication = "amsel-group-5-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_5") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result5 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
#group 6
apiKey <- 'NNSXS.CEZKRVOAWZUKTRPSLVFQVSODA66SPT7WBQGHYIY.SX5CE5LS36GKR2WK742K6VDIKSVMZ777JIW2YHHQEVZPLXKWPUCQ'
theApplication = "amsel-group-6-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_6") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result6 <- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
#group 7
apiKey <- 'NNSXS.2DPWFOWGNZPFVRDRJFR2JOKJYGDFZWDLJZUWZGY.UXY264XINHEDNQFYMXNV42JPW7CQKFUV5NHAS7AOAAQF5YBAUUVQ'
theApplication = "amsel-group-7-2022"
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Group_7") ##Laptop
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-16]
colnames(result) <- c("id", "message_time", "day", "hdop", "historical", "hour", "latitude", "longitude", "minute", "month", "pressure", "second", "temperature", "volts", "year")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
#result <- result[ which(result$year == 0 | result$year == 22),]
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result7<- result
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
result <- rbind.data.frame(result1, result2, result3, result4, result5, result6, result7)
setwd("//Users/ryanshipley/Documents/Research/2022_Blackbirds_Release/Data/Combined_Data") ##Laptop
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
#berchtesgaden
apiKey <- 'NNSXS.HQFNBW6LOIGIC4U3OO7MRGP6JD4KBKDTSQNGWLQ.MD7OGGWO6GJE4IN7PZVMFM3N6NVGLAZH5J23ANN4DPVNUOV2B5QA'
theApplication = "berchtesgaden-2022-choughs-test"
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Data") ##Laptop
#test_tags
#apiKey <- 'NNSXS.76D5CPNMD6VAUZKXYVXFLREQDLT5ML5BNH5A4TI.HAKCARLNAIQ3Y6BLMOVOU7MDKBGJ57J5DZXTAKH6EDBEATY5HVIQ'
#theApplication = "tag-prototypes-2022"
#setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API_Integration/Test_Tag_Data") ##Laptop
theFields = "up.uplink_message.decoded_payload"
theNumberOfRecords = 3600
theURL = paste("https://eu1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&limit=",theNumberOfRecords,"&field_mask=",theFields, sep="")
#theURL = paste("https://au1.cloud.thethings.network/api/v3/as/applications/", theApplication, "/packages/storage/uplink_message?order=-received_at&last=186400s", "&field_mask=", theFields, sep="")
result <- httr::GET(theURL, add_headers(Accept = 'text/event-stream', Authorization = paste('Bearer', apiKey)))
result <- httr::content(result, as='text', encoding="UTF-8")
result <- paste("{\"data\": [", gsub("\n\n", ",", result), "]}", sep="")
result <- RJSONIO::fromJSON(result, asText = TRUE )
#result <- rjson::fromJSON(result)
#result <- result %>%
#  spread_all
#result <- result[[1]][lengths(result[[1]]) != 0]
result <- as.data.frame(t(matrix(unlist(result), nrow=length(unlist(result$data[1])))))
result <- result[,-10]
colnames(result) <- c("id", "message_time", "volts", "d/m/y", "hdop", "latitude", "longitude", "siv", "h/m/s/cs")
result$latitude <- as.numeric(result$latitude)
result$longitude <- as.numeric(result$longitude)
curr_date <- Sys.Date()
file_name <- paste0(curr_date, "-GPS-records.csv")
write.csv(result, file_name)
result$volts <- as.numeric(result$volts)
result$volts <- as.numeric(result$volts)
result$time_stamp <- lubridate::ymd_hms(result$message_time)
result$id_6 <- stringr::str_sub(result$id, -6, -1)
#result <- result[which(result$id_6 == "04476c" | result$id_6 == "04476d" | result$id_6 == "04476e" |
#                        result$id_6 == "04476f" | result$id_6 == "044770" | result$id_6 == "044a2b" |
#                         result$id_6 == "044a2c" | result$id_6 == "044a2d" | result$id_6 == "044a2f"),]
ggplot2::ggplot(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts))+
annotate(geom="rect", ymin=3.95, ymax=4.3, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#CAFFBF", alpha=0.8)+
annotate(geom="rect", ymin=3.68, ymax=3.95, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FDFFB6", alpha=0.8)+
annotate(geom="rect", ymin=3.58, ymax=3.68, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFD6A5", alpha=0.8)+
annotate(geom="rect", ymin=-Inf, ymax=3.58, xmin = min(result$time_stamp), xmax = max(result$time_stamp), fill="#FFADAD", alpha=0.8)+
geom_point(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
geom_line(data=result[ which(result$volts > 3.10),], aes(time_stamp, volts, color=id))+
cowplot::theme_cowplot()+
scale_y_continuous(breaks=c(3.2, 3.4, 3.6, 3.8, 4.0, 4.2), limits=c(3.2,4.4))
