// TTN Decoder for TTN OTAA Feather US915 DHT22 Sketch
// Link: https://github.com/mcci-catena/arduino-lmic/blob/master/examples/ttn-otaa-feather-us915-dht22/ttn-otaa-feather-us915-dht22.ino
function Decoder(bytes, port) {
  // Decode an uplink message from a buffer
  // (array) of bytes to an object of fields.
  var decoded = {};
  
  decoded.date = ((bytes[0]) << 24) | ((bytes[1]) << 16) | ((bytes[2]) << 8) | ((bytes[3]));
  
  decoded.time = ((bytes[4]) << 56) | ((bytes[5]) << 48) | ((bytes[6]) << 40) | ((bytes[7]) << 32);
  decoded.time = decoded.time / 100;
  
  decoded.longitude = ((bytes[8]) << 88) | ((bytes[9]) << 80) | ((bytes[10]) << 72) | ((bytes[11]) << 64);
  decoded.longitude = decoded.longitude / 10000000;
  
  decoded.latitude = ((bytes[12]) << 120) | ((bytes[13]) << 112) | ((bytes[14]) << 104) | ((bytes[15]) << 96);
  decoded.latitude = decoded.latitude / 10000000;
  
  decoded.hdop = (bytes[16]);
  decoded.hdop = decoded.hdop / 10;
  
  decoded.siv = (bytes[17]);
  
  decoded.batt = ((bytes[18]) << 168) | ((bytes[19]) << 160);
  decoded.batt = decoded.batt / 10000 ;
  
  return decoded;
}

function sflt162f(rawSflt16)
	{
	// rawSflt16 is the 2-byte number decoded from wherever;
	// it's in range 0..0xFFFF
	// bit 15 is the sign bit
	// bits 14..11 are the exponent
	// bits 10..0 are the the mantissa. Unlike IEEE format, 
	// 	the msb is transmitted; this means that numbers
	//	might not be normalized, but makes coding for
	//	underflow easier.
	// As with IEEE format, negative zero is possible, so
	// we special-case that in hopes that JavaScript will
	// also cooperate.
	//
	// The result is a number in the open interval (-1.0, 1.0);
	// 
	
	// throw away high bits for repeatability.
	rawSflt16 &= 0xFFFF;

	// special case minus zero:
	if (rawSflt16 == 0x8000)
		return -0.0;

	// extract the sign.
	var sSign = ((rawSflt16 & 0x8000) !== 0) ? -1 : 1;
	
	// extract the exponent
	var exp1 = (rawSflt16 >> 11) & 0xF;

	// extract the "mantissa" (the fractional part)
	var mant1 = (rawSflt16 & 0x7FF) / 2048.0;

	// convert back to a floating point number. We hope 
	// that Math.pow(2, k) is handled efficiently by
	// the JS interpreter! If this is time critical code,
	// you can replace by a suitable shift and divide.
	var f_unscaled = sSign * mant1 * Math.pow(2, exp1 - 15);

	return f_unscaled;
	}

