xlim(x_min, x_max)+
ylim(y_min, y_max)+
theme_cowplot()+
theme(legend.position="none", axis.title.y=element_blank(), axis.text.y=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Dermanura phaeotis"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Dermanura tolteca"), size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_5 <- as.data.frame(bayes.prop.95.over_5)
plot_6a <- ggplot()+
geom_density(data=bayes.prop.95.over_5, aes(bayes.prop.95.over_5), fill=alt_color3, alpha=alpha_set, adjust=2, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,3,6))+
xlab("Overlap")+
ylab(NULL)
plot_6 <- plot_6 +
annotation_custom(
ggplotGrob(plot_6a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, ncol=2, rel_heights = c(1,1,1.2))
panel_fig <- plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, ncol=2, rel_heights = c(1,1,1.2))
save_plot("6_panel_fig.pdf", panel_fig, ncol = 1, base_width = 6.5, base_height = 5)
x_min <- -30; x_min2 <- -30.5; x_max <- -21; x_max2 <- -27; y_min <- 1.25; y_max <- 11.75
alt_color <- c("grey50")
alt_color2 <- c("firebrick")
alt_color3 <- c("cadetblue")
alpha_set <- 0.5
base_size <- 0.5
line_size <- 0.25
mean_size <- 2
lab_size <- 2.5
#multi_iso_plot <- function(x){}
#Artibeus jamaicensis - lituratus SUMMER
plot.new()
coords1 <- addEllipse(big_summer1$ML.mu[[1]][ , , 1], big_summer1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
coords2 <- addEllipse(big_summer1$ML.mu[[1]][ , , 2], big_summer1$ML.cov[[1]][ , , 2], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
poly1 <- Polygon(coords1)
poly2 <- Polygon(coords2)
# create SpatialPolygons objects
p1 <- SpatialPolygons(list(Polygons(list(poly1), "p1")))
p2 <- SpatialPolygons(list(Polygons(list(poly2), "p2")))
res <- gIntersection(p1, p2)
ellipse_int <- data.frame(res@polygons[[1]]@Polygons[[1]]@coords)
plot_1 <-    ggplot()+
geom_polygon(data=ellipse_int, aes(x=x, y=y, alpha=alpha_set),fill=alt_color2,)+
geom_path(data=as.data.frame(coords1), aes(x=V1, y=V2), size=line_size)+
geom_path(data=as.data.frame(coords2), aes(x=V1, y=V2), color=alt_color, size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Artibeus jamaicensis" & global_means$Season == "Summer") | (global_means$Name == "Artibeus lituratus" & global_means$Season == "Summer")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name, fill=Name), jitter=0.3, size=mean_size)+
geom_point(data=big_summer, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group), fill=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", alt_color, "black", alt_color))+
scale_shape_manual(values=c(19,21,19,21))+
scale_fill_manual(values=c("black", "white", "black", "white"))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
ylab(" ")+
theme_cowplot()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text.x=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Artibeus jamaicensis"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Artibeus lituratus"),size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_1 <- as.data.frame(bayes.prop.95.over_1)
plot_1a <- ggplot()+
geom_density(data=bayes.prop.95.over_1, aes(bayes.prop.95.over_1), fill=alt_color2, alpha=alpha_set, adjust=2, size=line_size, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,1,2))+
xlab("Overlap")+
ylab(NULL)
plot_1 <- plot_1 +
annotation_custom(
ggplotGrob(plot_1a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
#Artibeus jamaicensis - lituratus WINTER
coords3 <- addEllipse(big_winter1$ML.mu[[1]][ , , 1], big_winter1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
coords4 <- addEllipse(big_winter1$ML.mu[[1]][ , , 2], big_winter1$ML.cov[[1]][ , , 2], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
poly1 <- Polygon(coords3)
poly2 <- Polygon(coords4)
# create SpatialPolygons objects
p1 <- SpatialPolygons(list(Polygons(list(poly1), "p1")))
p2 <- SpatialPolygons(list(Polygons(list(poly2), "p2")))
res <- gIntersection(p1, p2)
ellipse_int2 <- data.frame(res@polygons[[1]]@Polygons[[1]]@coords)
plot_2 <- ggplot()+
geom_polygon(data=ellipse_int2, aes(x=x, y=y, alpha=alpha_set), fill=alt_color3)+
geom_path(data=as.data.frame(coords3), aes(x=V1, y=V2), size=line_size)+
geom_path(data=as.data.frame(coords4), aes(x=V1, y=V2), color=alt_color, size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Artibeus jamaicensis" & global_means$Season == "Winter") | (global_means$Name == "Artibeus lituratus" & global_means$Season == "Winter")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name, fill=Name), jitter=0.3, size=mean_size)+
geom_point(data=big_winter, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group), fill=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", alt_color, "black", alt_color))+
scale_shape_manual(values=c(19,21,19,21))+
scale_fill_manual(values=c("black", "white", "black", "white"))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
theme_cowplot()+
theme(legend.position="none")+
theme(legend.position="none", axis.title.x=element_blank(), axis.text.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Artibeus jamaicensis"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Artibeus lituratus"), size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_2 <- as.data.frame(bayes.prop.95.over_2)
plot_2a <- ggplot()+
geom_density(data=bayes.prop.95.over_2, aes(bayes.prop.95.over_2), fill=alt_color3, alpha=alpha_set, adjust=2, size=line_size, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,2,4))+
xlab("Overlap")+
ylab(NULL)
plot_2 <- plot_2 +
annotation_custom(
ggplotGrob(plot_2a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
#Sturnira parvidens - ludovici
coords4a <- addEllipse(med_summer1$ML.mu[[1]][ , , 1], med_summer1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
plot_3 <- ggplot()+
geom_path(data=as.data.frame(coords4a), aes(x=V1, y=V2), size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Sturnira lilium" & global_means$Season == "Summer")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name), jitter=0.3, size=mean_size)+
geom_point(data=med_summer, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", "black"))+
scale_shape_manual(values=c(19,19))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
theme_cowplot()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text.x=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Sturnira parvidens"), size=lab_size, color="black", hjust=0)
#Sturnira parvidens - ludovici
coords5 <- addEllipse(med_winter1$ML.mu[[1]][ , , 1], med_winter1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
coords6 <- addEllipse(med_winter1$ML.mu[[1]][ , , 2], med_winter1$ML.cov[[1]][ , , 2], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
poly1 <- Polygon(coords5)
poly2 <- Polygon(coords6)
# create SpatialPolygons objects
p1 <- SpatialPolygons(list(Polygons(list(poly1), "p1")))
p2 <- SpatialPolygons(list(Polygons(list(poly2), "p2")))
res <- gIntersection(p1, p2)
ellipse_int3 <- data.frame(res@polygons[[1]]@Polygons[[1]]@coords)
plot_4 <- ggplot()+
geom_polygon(data=ellipse_int3, aes(x=x, y=y, alpha=alpha_set), fill=alt_color3)+
geom_path(data=as.data.frame(coords5), aes(x=V1, y=V2), size=line_size)+
geom_path(data=as.data.frame(coords6), aes(x=V1, y=V2), color=alt_color, size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Sturnira lilium" & global_means$Season == "Winter") | (global_means$Name == "Sturnira ludovici" & global_means$Season == "Winter")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name, fill=Name), jitter=0.3, size=mean_size)+
geom_point(data=med_winter, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group), fill=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", alt_color, "black", alt_color))+
scale_shape_manual(values=c(19,21,19,21))+
scale_fill_manual(values=c("black", "white", "black", "white"))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
theme_cowplot()+
theme(legend.position="none", axis.title.x=element_blank(), axis.text.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Sturnira parvidens"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Sturnira ludovici"), size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_3 <- as.data.frame(bayes.prop.95.over_3)
plot_4a <- ggplot()+
geom_density(data=bayes.prop.95.over_3, aes(bayes.prop.95.over_3), fill=alt_color3, alpha=alpha_set, adjust=2, size=line_size, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,1,2,3))+
xlab("Overlap")+
ylab(NULL)
plot_4 <- plot_4 +
annotation_custom(
ggplotGrob(plot_4a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
#Dermanura phaeotis - toltecus SUMMER
coords7 <- addEllipse(sm_summer1$ML.mu[[1]][ , , 1], sm_summer1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
coords8 <- addEllipse(sm_summer1$ML.mu[[1]][ , , 2], sm_summer1$ML.cov[[1]][ , , 2], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
poly1 <- Polygon(coords7)
poly2 <- Polygon(coords8)
# create SpatialPolygons objects
p1 <- SpatialPolygons(list(Polygons(list(poly1), "p1")))
p2 <- SpatialPolygons(list(Polygons(list(poly2), "p2")))
res <- gIntersection(p1, p2)
ellipse_int4 <- data.frame(res@polygons[[1]]@Polygons[[1]]@coords)
plot_5 <- ggplot()+
geom_polygon(data=ellipse_int4, aes(x=x, y=y, alpha=alpha_set), fill=alt_color2)+
geom_path(data=as.data.frame(coords7), aes(x=V1, y=V2), size=line_size)+
geom_path(data=as.data.frame(coords8), aes(x=V1, y=V2), color=alt_color, size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Artibeus phaeotis" & global_means$Season == "Summer") | (global_means$Name == "Artibeus toltecus" & global_means$Season == "Summer")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name, fill=Name), jitter=0.3, size=mean_size)+
geom_point(data=sm_summer, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group), fill=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", alt_color, "black", alt_color))+
scale_shape_manual(values=c(19,21,19,21))+
scale_fill_manual(values=c("black", "white", "black", "white"))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
ylab(" ")+
theme_cowplot()+
theme(legend.position="none")+
geom_text(data=NULL, aes(x=-30, y=3, label="Dermanura phaeotis"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Dermanura tolteca"), size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_4 <- as.data.frame(bayes.prop.95.over_4)
plot_5a <- ggplot()+
geom_density(data=bayes.prop.95.over_4, aes(bayes.prop.95.over_4), fill=alt_color2, alpha=alpha_set, adjust=2, size=line_size, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,1,2))+
xlab("Overlap")+
ylab(NULL)
plot_5 <- plot_5 +
annotation_custom(
ggplotGrob(plot_5a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
#Dermanura phaeotis - toltecus WINTER
coords9 <- addEllipse(sm_winter1$ML.mu[[1]][ , , 1], sm_winter1$ML.cov[[1]][ , , 1], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
coords10 <- addEllipse(sm_winter1$ML.mu[[1]][ , , 2], sm_winter1$ML.cov[[1]][ , , 2], m = NULL, n = 100, p.interval = 0.95, ci.mean = FALSE, lty = 3, lwd = 1)
poly1 <- Polygon(coords9)
poly2 <- Polygon(coords10)
# create SpatialPolygons objects
p1 <- SpatialPolygons(list(Polygons(list(poly1), "p1")))
p2 <- SpatialPolygons(list(Polygons(list(poly2), "p2")))
res <- gIntersection(p1, p2)
ellipse_int5 <- data.frame(res@polygons[[1]]@Polygons[[1]]@coords)
plot_6 <- ggplot()+
geom_polygon(data=ellipse_int5, aes(x=x, y=y, alpha=alpha_set), fill=alt_color3)+
geom_path(data=as.data.frame(coords9), aes(x=V1, y=V2), size=line_size)+
geom_path(data=as.data.frame(coords10), aes(x=V1, y=V2), color=alt_color, size=line_size)+
geom_point(data=global_means[ which((global_means$Name == "Artibeus phaeotis" & global_means$Season == "Winter") | (global_means$Name == "Artibeus toltecus" & global_means$Season == "Winter")),], aes(x=c_mean, y=n_mean, color=Name, shape=Name, fill=Name), jitter=0.3, size=mean_size)+
geom_point(data=sm_winter, aes(x=iso1, y=iso2, shape=as.factor(group), color=as.factor(group), fill=as.factor(group)), size=base_size)+
scale_color_manual(values=c("black", alt_color, "black", alt_color))+
scale_shape_manual(values=c(19,21,19,21))+
scale_fill_manual(values=c("black", "white", "black", "white"))+
xlim(x_min, x_max)+
ylim(y_min, y_max)+
theme_cowplot()+
theme(legend.position="none", axis.title.y=element_blank(), axis.text.y=element_blank())+
geom_text(data=NULL, aes(x=-30, y=3, label="Dermanura phaeotis"), size=lab_size, color="black", hjust=0)+
geom_text(data=NULL, aes(x=-30, y=2, label="Dermanura tolteca"), size=lab_size, color=alt_color, hjust=0)
bayes.prop.95.over_5 <- as.data.frame(bayes.prop.95.over_5)
plot_6a <- ggplot()+
geom_density(data=bayes.prop.95.over_5, aes(bayes.prop.95.over_5), fill=alt_color3, alpha=alpha_set, adjust=2, color=NA)+
theme_cowplot()+
theme(text = element_text(size=7), axis.text = element_text(size=7), axis.line = element_line(size = line_size), axis.ticks = element_line(size = line_size))+
scale_x_continuous(labels = scales::percent, breaks=c(0,0.5, 1), limits=c(0,1))+
scale_y_continuous(breaks=c(0,3,6))+
xlab("Overlap")+
ylab(NULL)
plot_6 <- plot_6 +
annotation_custom(
ggplotGrob(plot_6a),
xmin = x_min2, xmax = x_max2, ymin = 4, ymax = y_max
)
plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, ncol=2, rel_heights = c(1,1,1.2))
panel_fig <- plot_grid(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, ncol=2, rel_heights = c(1,1,1.2))
save_plot("6_panel_fig.pdf", panel_fig, ncol = 1, base_width = 6.5, base_height = 5)
knitr::opts_chunk$set(echo = TRUE)
require(lubridate)
require(ggplot2)
require(cowplot)
require(Hmisc)
require(reshape)
require(plyr)
setwd("//Users/ryanshipley/Documents/Research/2010 SNOMNH Bat Nails XS/MODIS")
my_data <- read.csv(file="Colima.csv", head=TRUE, sep=",")
rain_days <- c(1, 32, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335)
rain_amounts <- c(24.2, 6.2, 4.3, 2.1, 10.9, 128.3, 205.6, 191.9, 191, 92, 17.6, 11.3)
rain_data <- as.data.frame(cbind(rain_days, rain_amounts))
beetle_amounts1 <- c(NA, NA, 0, NA, 175, NA, NA, 780, 375, 75, 220, NA)
beetle_amounts2 <- c(NA, 0, NA, 10, NA, 25, 75, 275, NA, 40, 5, NA)
#Jimenez-Sanchez_Staphylinae 2009
beetle_amounts3 <- c(275, 64, 18, 234, 938, 3975, 3659, 3261, 1775, 544, 14, 133)
#Catorhinthidae_Santa_Cruz_and_Peredo
truebug_amounts <- c(0.16, 2, 0.35, 0.36, 0.22, 22, 5, 285, 262, 3, 0, 0)
flower_amounts <- c( 7, 1, 6, 3, 3, 29, 21, 10, 2, 7, 8, 1)
beetle_data <- as.data.frame(cbind(rain_days, beetle_amounts1, beetle_amounts2, beetle_amounts3, truebug_amounts, flower_amounts))
#beetle_data$beetle_amounts1 = beetle_data$beetle_amounts1 / 780
#beetle_data$beetle_amounts2 = beetle_data$beetle_amounts2 / 275
beetle_data <- as.data.frame(beetle_data)
corr_data <- cbind(rain_data, beetle_data)
corr_data <- as.matrix(corr_data)
result<-rcorr(corr_data, type="pearson")
result$r[result$n<4]<-0 # ignore less than five observations
result$r
result$P
my_data$real_date <- mdy(my_data$real_date)
my_data$doy <- yday(my_data$real_date)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
my_data$NDVI <- range01(my_data$X1.km.16.days.NDVI)
data_summary <- ddply(my_data, c("doy"), summarise, mean=mean(NDVI), sd=sd(NDVI, na.rm=TRUE))
colnames(data_summary)[2] <- c("NDVI")
df_points <- data.frame(name=c("NDVI"), x=c(0), y=c(0.99))
figure_1 <- ggplot()+
geom_pointrange(data=data_summary, aes(x=doy, y=NDVI, ymax=NDVI+sd, ymin=NDVI-sd), size=0.25)+
geom_bar(data=rain_data, aes(x=rain_days, y=rain_amounts * (1/600)), fill="white", colour="gray50",stat="identity")+
scale_y_continuous(limits=c(0, 1),
sec.axis = sec_axis(~ . *600, name = "Precipitation"))+
geom_point(data=df_points, aes(x=x, y=y, shape=name), size=2)+
geom_text(data=df_points, aes(x=x+15, y=y, label=name), hjust=0 ,size=2)+
scale_shape_manual(values=c(19))+
ylab("NDVI")+
xlab("Day of Year")+
theme_cowplot(font_size=10)+
theme(legend.position="none")
beetle_data$beetle_amounts1 <- rescaler.default(beetle_data$beetle_amounts1, type="range", na.rm=TRUE)
beetle_data$beetle_amounts2 <- rescaler.default(beetle_data$beetle_amounts2, type="range", na.rm=TRUE)
beetle_data$beetle_amounts3 <- rescaler.default(beetle_data$beetle_amounts3, type="range", na.rm=TRUE)
beetle_data$truebug_amounts <- rescaler.default(beetle_data$truebug_amounts, type="range", na.rm=TRUE)
beetle_data$average <- rowMeans(beetle_data[,2:5], na.rm=TRUE)
df_points <- data.frame(name=c("Cantharidae", "Cerambycidae", "Coreidae", "Staphylinidae"), x=c(0,0,0,0), y=c(0.99, 0.92, 0.85, 0.78))
figure_2 <- ggplot()+
geom_bar(data=beetle_data, aes(x=rain_days, y=flower_amounts * (1/32)), fill="white", colour="gray50",stat="identity")+
geom_point(data=beetle_data, aes(x=rain_days, y=beetle_amounts1), pch=21, size=2, color="black", fill="black")+
geom_point(data=beetle_data, aes(x=rain_days, y=beetle_amounts2), pch=22, size=2, color="black", fill="white")+
geom_point(data=beetle_data, aes(x=rain_days, y=beetle_amounts3), pch=23, size=2, color="black", fill="white")+
geom_point(data=beetle_data, aes(x=rain_days, y=truebug_amounts), pch=24, size=2, color="black", fill="black")+
scale_y_continuous(limits=c(0, 1), breaks= c(0,0.25,0.5, 0.75, 1), sec.axis = sec_axis(~ . *32, name = "Percent Flowering"))+
geom_point(data=df_points, aes(x=x, y=y, shape=name), size=2)+
geom_text(data=df_points, aes(x=x+15, y=y, label=name), hjust=0 ,size=2)+
scale_shape_manual(values=c(19, 0, 17, 5))+
geom_line(data=beetle_data, aes(x=rain_days, y=average), size=0.5)+
ylab("Insect Abundance")+
xlab("Day of Year")+
theme_cowplot(font_size=10)+
theme(legend.position="none")
comb_fig <- plot_grid(figure_1, figure_2, ncol = 1, labels=c("A", "B"), align="v")
comb_fig
save_plot("comb_fig.png", comb_fig, ncol = 1, base_width = 3.4, base_height = 5)
save_plot("comb_fig.pdf", comb_fig, ncol = 1, base_width = 3.4, base_height = 5)
setwd("//Users/ryanshipley/Documents/Research/2010 SNOMNH Bat Nails XS")
my_data <- read.csv(file="4_24_2014_Formatted_for_R.csv", head=TRUE, sep=",")
library(ggplot2)
library(cowplot)
my_data$TEF<- (my_data$N15 - 2.583) / 3.453
my_data <- my_data[ which(my_data$Name == 'Artibeus phaeotis' | my_data$Name == 'Artibeus toltecus' |
my_data$Name == 'Artibeus jamaicensis' | my_data$Name == 'Artibeus lituratus' |
my_data$Name == 'Sturnira lilium' |my_data$Name == 'Sturnira ludovici'),]
my_data$Name <- revalue(my_data$Name, c("Sturnira lilium" = "Sturnira parvidens", "Artibeus phaeotis" = "Dermanura phaeotis", "Artibeus toltecus" = "Dermanura tolteca"))
my_data_sub <- ddply( my_data, c("ID", "Season", "Name"), summarise, mean=mean(TEF))
detach("package:plyr", unload=TRUE)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=TRUE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
my_data_SE <- summarySE(my_data_sub, measurevar="mean", groupvars=c("Name", "Season"))
View(my_data_SE)
my_data_SE$Name <- factor(my_data_SE$Name, levels = c( "Dermanura phaeotis", "Dermanura tolteca",
"Sturnira parvidens", "Sturnira ludovici", "Artibeus jamaicensis",
"Artibeus lituratus"))
my_data_SE$ci_90 <- my_data_SE$se * 1.64
my_data_SE$ci_95 <- my_data_SE$se * 1.96
my_data_SE$ci_99 <- my_data_SE$se * 2.58
pd <- position_dodge(0.5)
str(my_data_SE)
fit.1 <- aov(TEF ~ Group, data=my_data)
summary(fit.1)
TukeyHSD(fit.1)
require(ggnewscale)
df_points <- data.frame(name=c("Wet Season", "Dry Season"), Season=c("Winter", "Summer"), x=c(5, 5), y=c(2.2, 2.1))
figure_3 <- ggplot()+
scale_x_discrete()+
geom_linerange(data=my_data_SE, aes(x=Name, y=mean, ymax=mean+ci_99, ymin=mean-ci_99, color=Season, fill=Season), position=pd, size=2, alpha=0.1)+
geom_linerange(data=my_data_SE, aes(x=Name, y=mean, ymax=mean+ci_95, ymin=mean-ci_95, color=Season, fill=Season), position=pd, size=2.5, alpha=0.25)+
geom_linerange(data=my_data_SE, aes(x=Name, y=mean, ymax=mean+ci_90, ymin=mean-ci_90, color=Season, fill=Season), position=pd, size=3, alpha=0.4)+
scale_color_manual(values=c("firebrick", "cadetblue"))+
new_scale("fill")+
new_scale("colour")+
geom_point(data=my_data_sub, aes(x=Name, y=mean, colour = Season, shape = Season, fill = Season), size=1, position = pd)+
geom_point(data=df_points, aes(x=x, y=y, shape=Season, fill=Season, colour=Season), size=2)+
scale_shape_manual(values=c(19, 21))+
geom_text(data=df_points, aes(x=x+0.1, y=y, label=name, color=Season, fill=Season), hjust=0 ,size=2)+
scale_fill_manual(values=c("firebrick4", "cadetblue4"))+
scale_colour_manual(values=c("firebrick4", "cadetblue4"))+
theme_cowplot()+
ylim(0,2.25)+
ylab("Trophic Level")+
xlab(NULL)+
theme(axis.text.x=element_text(angle=60,hjust=1,vjust=1, face="italic"), legend.position="none")
figure_3
save_plot("figure_3.pdf", figure_3, ncol = 1, base_width = 4, base_height = 4.5)
install.packages("rjson")
knitr::opts_chunk$set(echo = TRUE)
require(rjson)
install.packages("RCurl")
install.packages("curl")
knitr::opts_chunk$set(echo = TRUE)
require(curl)
require(rjson)
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=1h",
add_headers(Authorization = paste("Key", apiKey))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=1h",
add_headers(Authorization = paste("Key ", apiKey))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=1h", add_headers(Authorization = paste("Key ", apiKey)))
View(result)
knitr::opts_chunk$set(echo = TRUE)
require(curl)
require(rjson)
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=1h", add_headers(Authorization = paste("Key ", apiKey)))
View(result)
View(result)
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", add_headers(Authorization = paste("Key ", apiKey)))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", add_headers(Authorization = paste("key ", apiKey)))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", accept_json(), add_headers(Authorization = paste("key ", apiKey)))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", accept_json(), add_headers(Authorization = apiKey))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/", accept_json(), add_headers(Authorization = paste("key ", apiKey)))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", accept_json(), verbose(), add_headers(Authorization = paste("Key ", apiKey)))
library(httr)
apiKey <- "ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU"
result <- GET("https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h", accept_json(), verbose(), add_headers(Authorization = paste("Key ",apiKey)))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Authorization = paste("Key ",apiKey)))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', verbose(), add_headers(Authorization = paste("Key ",apiKey)))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Authorization = paste("Key", apiKey)))
install.packages("httr")
install.packages("httr")
knitr::opts_chunk$set(echo = TRUE)
require(curl)
require(rjson)
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Authorization = paste("Key", apiKey)))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Authorization = paste("Key", apiKey), hhtpauth=1L))
#GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', authenticate("apiKey", "secret"))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Authorization = paste("Key", apiKey), httpauth=1L))
#GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', authenticate("apiKey", "secret"))
GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', authenticate("Key", apiKey))
GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', authenticate("Authorization: Key", apiKey))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Accept = application/json, Authorization = paste("Key", apiKey)))
library(httr)
apiKey <- 'ttn-account-v2.5oyRzOIEVRgCIS7Fv16K19u6pveX_QqArH-T4Nz2tiU'
result <- GET('https://lora_testnode_1.data.thethingsnetwork.org/api/v2/query/868_test_radio_node?last=2h', accept_json(), verbose(), add_headers(Accept = "application/json", Authorization = paste("Key", apiKey)))
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
View(result)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
result <- as.data.frame(result)
View(result)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
result <- as.data.frame(result)
View(result)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
View(result)
install.packages("json_lite")
require(data.table)
result <- Map(result, as.data.table)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
result <- Map(result, as.data.table)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
result <- result %>%
map(~ fromJSON(.x)) %>%
bind_rows()
require(purrr)
setwd("//Users/ryanshipley/Documents/Github/Solar_LoRa_GPS/API Integration")
result <- fromJSON(file = "test_json.json")
result <- result %>%
map(~ fromJSON(.x)) %>%
bind_rows()
